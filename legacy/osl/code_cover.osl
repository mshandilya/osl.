var z := 5;
var i;
var b;
def fact(n){
    // var x:= n;
    // return x;
    // def h(u){
    //     var o:= u;
    // }
    if(n = 0){
        return 1;
    }
    return n*fact(n-1);
}
log fact(5);


def g(m){
    var y:= m;
    return y;
}
log g(4);

log fact(10);

def ff(a){
    return a+2;
}
ff(2);



var x := 10;
def fff(a)
{
    log x;
    x := a;
    var y := x;
    def g(y)
    {
        x := y;
        return x;
    }
    log g(12);
    log x;
    return x;
}
log fff(5);
x;


// var x := 5;
// def f(y)
// {
//     return x;
// }

// def g(z)
// {
//     var x := 6;
//     return f(z);
// }
// log(g(10));
// x := 7;
// g(10);

// To do: (Fix the error in the following code)


// def f1()
// {
//     var x := 10;
//     // return x;
//     def f2(t)
//     {
//         return x*t;
//     }
//     return f2;
// }
// var msg := f1;
// msg := msg();
// log msg(5);


// var msg1 := msg;
// log msg1;
// log f1();


// var msg := f1();
// log msg();


// var x := 5;
// var y := x;
// log x;
// log y;



// var x := 5;
// var y := x;
// var z := y;
// log x;
// log y;
// log z;




// var x := 5;

// def foo(y)
// {
//     // x := y;
//     def bar(z)
//     {
//         log x;
//         // x := z;
//         // def foobar()
//         // {
//         //     x := 20;
//         //     return x;
//         // }
//         // log x;
//         return x;
//         // return foobar;
//     }
//     log x;
//     return bar;
// }

// var f := foo(46);
// var g := f(12);
// log g;
// x := 20;
// foo(46)(12);

var arr := [1,2+5,3,4,5];
arr[0] := 10;
log arr[2+2];
log arr[1];

b := 1;
var arr2 := [[1,2],[3,4],3,4,5];
arr2[1][0] := 10;
log arr2[1][0];

var arr6[2][3][4];


// var arr7[13];


var arr5 := [3,4,5];
arr5[2] := 12;
log arr5[2];
arr2[b] := 2;
arr[0] := 1;
log arr2[0][0 + arr[0]];

b := 10;
var arr3 := [b, b+1, b+2, b+3, b+4];

// var i := 0;
while (i < 5)
{
    log arr3[i];
    i := i + 1;
}

var arr7[11][10];

// // var i := 0;
i := 0;
var j;
while (i < 11)
{
    j := 0;
    while (j < 10)
    {
        arr7[i][j] := 10*i+j;
        j := j + 1;
    }
    i := i + 1;
}

i := 0;
while (i < 11)
{
    j := 0;
    while (j < 10)
    {
        log arr7[i][j];
        j := j + 1;
    }
    i := i + 1;
}

// log arr7;

// Unique paths leetcode problem
var m := 3;
var n := 7;
var dp[m][n];
i:=0 ;
while(i < m)
{
    j:=0;
    while(j < n)
    {
        if(i = 0 || j = 0)
        {
            dp[i][j] := 1;
        }
        else
        {
            dp[i][j] := dp[i-1][j] + dp[i][j-1];
        }
        j := j + 1;
    }
    i := i + 1;
}
// log dp;
log dp[m-1][n-1];

// // LONGEST INCREASING SUBSEQUENCE
def max(a, b)
{
    if (a > b)
    {
        return a;
    }
    return b;
}

arr := [10, 9, 2, 5, 3, 7, 101, 18];
n := 8;
dp := [1, 1, 1, 1, 1, 1, 1, 1];
var maxL := 1;
i := 0;
j := 0;
while (i < n)
{
    j := 0;
    while (j < i)
    {
        if (arr[i] > arr[j])
        {
            dp[i] := max(dp[i], dp[j] + 1);
        }
        j := j + 1;
    }
    maxL := max(maxL, dp[i]);
    i := i + 1;
}

// i := 0;
// while (i < n)
// {
//     log dp[i];
//     i := i + 1;
// }
// maxL;

// var s := "Guntas";
// s[0] := 'g';
// var i := 0;
// while (i < 6)
// {
//     log s[i];
//     i := i + 1;
// }

// def isPal(n, rev, org) {
//     if (n = 0) return rev = org;
//     return isPal(n/10, rev*10 + n%10, org);
// }

// def F(i, j, maxPal) {
//     if (i < 100) return maxPal;
//     if (j < 100) return F(i - 1, i - 1, maxPal);
//     var prod := i * j;
//     if ((prod > maxPal) && (isPal(prod, 0, prod)))
//         maxPal := prod;
//     return F(i, j - 1, maxPal);
// }
// log F(999, 999, 0);

// def find_nth_prime()
// {
//     var limit := 2000000;
//     var is_prime[limit];
    
//     var i := 0;
//     var j;
    
//     while (i < limit) 
//     {
//         is_prime[i] := 1;
//         i := i + 1;
//     }
    
//     is_prime[0] := 0;
//     is_prime[1] := 0;
    
//     i := 2;
//     while (i * i < limit)
//     {
//         if (is_prime[i])
//         {
//             j := i * i;
//             while (j < limit)
//             {
//                 is_prime[j] := 0;
//                 j := j + i;
//             }       
//         }
//         i := i + 1;
//     }
    
//     var sum := 0;
//     var num := 2;
//     while (num < limit)
//     {
//         if (is_prime[num]) sum := sum + num;
//         num := num + 1;
//     }
//     return sum;   
// }

// find_nth_prime();


// var arr := [1, [2, 3, [4, 5]], 6, 7];
// var x := arr[1][0] + arr[1][2][1];
// arr[1][2][x - 7] := 10;
// log arr[1][2][0];

// var M := 1;
// var N := 2;
// var a[M][M + N];
// var i := 0;
// var j := 0;
// while (i < M)
// {
//     j := 0;
//     while (j < M + N)
//     {
//         a[i][j] := i + j;
//         log a[i][j];
//         j := j + 1;
//     }
//     i := i + 1;
// }
// log x;
// log a[M - 1][N - 1];

// var x := 5;
// var y := x + 10;
// var z := y + x;
// var t := 'G';
// log z;
// log x < z;
// log x - y;
// log 1.5 + 2;
// log 'a';
// log 'a' + 1;

// log x;
// var x := 5;
// var y := x - 1.5;   // y = 3.5
// var z := x + 'g';   // z = 'l'
// var t := 2;         
// x := x / t;         // x = 2
// t := y / t;         // t = 1

// log x % t;          // log 0
// log x;              // log 2
// log y;              // log 3.5        
// log z;              // log 'l'

// var x := 1;
// var y := 1;
// while x < 10
// {
//     if y = 5
//     {
//         log y;
//     }
//     else
//     {
//         log x + 50;
//     }
//     y := y + 1;
//     log x;
//     x := x + 1;
// }

// def F(a, b)
// {
//     log a - b;
//     return a % b;
// }
// var x := 10;
// log F(x, x - 7);

// def fact(n)
// {
//     if(n = 0)
//     {
//         return 1;
//     }
//     return n*fact(n-1);
// }
// log fact(15);

// def fib(n)
// {
//     if (n <= 1)
//     {
//         return n;
//     }
//     return fib(n - 1) + fib(n - 2);
// }

// log fib(10);

// var x := 5;
// def F(a)
// {
//     return a;
// }
// F(5);

// var x := 5;
// def f(a)
// {
//     if (a > x)
//     {
//         return 5;
//     }
//     else
//     {
//         return 7;
//     }
// }
// log f(10);

// def F()
// {
//     return 5;
// }
// F();

// var x := 5;
// def f(a) //
// {
//     var c := 0;
//     def g(b)        // g closes over a(id=3), g(id=5)
//     {
//         var y := 10;
//         def hh(z){      // hh closes over hh(id=8)
//             hh(1);
//             return z+1;
//         }
//         def h(d)    // h closes over b(id=6), g(id=5), a(id=3), hh(id=8)
//         {
//             var tmp := 8;
//             b := tmp;
//             var z := b*2;
//             // return z+a;
//             b := b + g(d);
//             return a + b + d + hh(x);
//         }
//         return h;
//     }
//     return g;
// }
// var t := f(10)(5)(3);
// log t;

// def fact(n)
// {
//     if (n <= 1){
//         return n;
//     }
//     return n * fact(n - 1);
// }

// log fact(5);



// def counter()
// {
//     var count := 0;
//     def inc()
//     {
//         count := count + 1;
//         return count;
//     }
//     return inc;
// }

// var c1 := counter();
// var c2 := counter();
// log c1();
// log c1();
// log c1();
// log c2();
// log c2();




// def c42(){ // empty closure
//     return 42;
// }

// // log c42();

// var c1 := 42;

// def f(g){ // empty closure
//     var x := 5;
//     def h(){    // empty closure
//         return 42;
//     }
//     def s(){    // Closure has ids: 4 6 7
//         return x + g() + c42() + h() + c1;
//     }
//     return s;
// }

// var s1 := f(c42);
// log s1();





// def makeClosure(value) { // Empty closure
//     def closure() { // Closure has id 2 (value)
//         log value;
//     }
//     return closure;
// }
// var doughnut := makeClosure(2);
// var bagel := makeClosure(3);
// doughnut();
// bagel();


var a := 5;
{
    var a := a;
    log a;
}
log a;
log ~a;

arr := "kishan";
log arr[0];
arr := "k\\\/\b\f\t\r\n\"\"\u0000";

// This does not work in osl but works in python
// def f(){
//     def odd(a){
//         return a;
//     }
//     def even(a){
//         return odd(a-1);
//     }
//     return even;
// }

// var f1 := f();
// log f1(5);



// def make_constant(i) // empty closure
// {
//     def c() // closure has id 2
//     {
//         return i;
//     }
        
//     return c;
// }
    

// def a(in_k, x1, x2, x3, x4, x5) // empty closure
// {   
//     var k := [in_k];

//     def b() // closure has ids: 6 7 8 9 11 12
//     {
//         k[0] := k[0] - 1;
//         return a(k[0], b, x1, x2, x3, x4);
//     }
//     log k[0];

//     if k[0] <= 0
//     {
//         return x4() + x5();
//     } 
//     else
//     {
//         b();
//     } 
    
// }

// var x1 := make_constant(1);
// var x2 := make_constant(-1);
// var x3 := make_constant(-1);
// var x4 := make_constant(1);
// var x5 := make_constant(0);

// log x1();
// log x2();
// log x1();
// log x3();
// log x4();
// log x2();
// log x5();
// // log a(10, x1, x2, x3, x4, x5);







// def isPal(n) {
//     var rev := 0;
//     var nn := n;
//     while (n > 0)
//     {
//         rev := rev * 10 + n % 10;
//         n := n / 10;
//     }
//     return rev=nn;
// }

// var maxPal := 0;
// var i := 999;
// var j;
// var prod;
// while (i >= 1) {
//     j := i;
//     while (j >= 1) {
//         prod := i * j;
//         if ((prod > maxPal) && (isPal(prod))) {
//             maxPal := prod;
//         }
//         j := j - 1;
//     }
//     i := i - 1;
// }
// log maxPal;




// var a := 5;
// def f(){
//     log a;
//     return;
// }

// a := 10;
// f();
// a := 20;
// f();
// a := 30;
// log a;




a:= 5;
def f(){
    a := 10;
    log a;
    return;
}

f();
log a;













// Test file for OSL language implementation
// These tests aim to achieve 100% coverage of the compiler source code

// ==========================================
// 1. BASIC VARIABLE TESTS
// ==========================================

// Variable declarations and assignments
var test_int := 42;
var test_float := 3.14;
var test_char := 'x';
var test_bool := 1;  // Used as boolean

// Test printing/logging variables
// // log "Basic variable tests:";
log test_int;
log test_float;
log test_char;
log test_bool;

// Testing variable scope and reassignment
var scope_test := 10;
{
    var scope_test := 20;
    // // log "Inner scope:";
    log scope_test;
    scope_test := 30;
    log scope_test;
}
// // log "Outer scope:";
log scope_test;
scope_test := 50;
log scope_test;

// ==========================================
// 2. ARITHMETIC OPERATIONS
// ==========================================

// // log "Arithmetic tests:";
log test_int + 8;   // 50
log test_int - 2;   // 40
log test_int * 2;   // 84
log test_int / 7;   // 6
log test_int % 5;   // 2

// Mixed type operations
log test_int + test_float;  // Int + Float
log test_char + 1;          // Char + Int

// Negative numbers and unary operations
var neg_test := -10;
log -neg_test;
log -test_int;

// ==========================================
// 3. COMPARISON OPERATIONS
// ==========================================

// // log "Comparison tests:";
log test_int > 20;   // true (1)
log test_int < 20;   // false (0)
log test_int = 42;   // true (1)
log test_int ~= 42;  // false (0)
log test_int >= 42;  // true (1)
log test_int <= 42;  // true (1)

// ==========================================
// 4. LOGICAL OPERATIONS
// ==========================================

// // log "Logical operation tests:";
log 1 && 1;  // true (1)
log 1 && 0;  // false (0)
log 0 || 1;   // true (1)
log 0 || 0;   // false (0)

// // ==========================================
// // 5. CONTROL FLOW TESTS
// // ==========================================

// // If-else tests
// // log "If-else tests:";
if (test_int > 40) {
    // log "test_int is greater than 40";
} else {
    // log "test_int is not greater than 40";
}

if (test_int < 0) {
    // log "This should not be printed";
} else if (test_int > 100) {
    // log "This should also not be printed";
} else {
    // log "This should be printed";
}

// While loop tests
// log "While loop test:";
var counter := 0;
while (counter < 5) {
    log counter;
    counter := counter + 1;
}


// // ==========================================
// // 6. FUNCTION TESTS
// // ==========================================

// // Basic function
def simple_function() {
    // log "Inside simple_function";
    return 100;
}

// log "Function test results:";
log simple_function();

// Function with parameters
def add(a, b) {
    return a + b;
}

log add(5, 10);
log add(test_int, test_float);

// Recursive function
def factorial(n) {
    if (n <= 1) {
        return 1;
    }
    return n * factorial(n - 1);
}

// log "Factorial test:";
log factorial(5);  // 120

// Function with multiple returns
def test_multi_returns(x) {
    if (x > 0) {
        return 1;
    } else if (x < 0) {
        return -1;
    } else {
        return 0;
    }
}

log test_multi_returns(10);
log test_multi_returns(-5);
log test_multi_returns(0);

// // ==========================================
// // 7. ARRAY TESTS
// // ==========================================

// // Simple array
var simple_array := [1, 2, 3, 4, 5];
// log "Array tests:";
log simple_array[0];
log simple_array[4];

// Array assignments
simple_array[2] := 99;
log simple_array[2];

// Multi-dimensional arrays
var matrix := [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
log matrix[1][1];  // 5
matrix[0][2] := 30;
log matrix[0][2];  // 30

// Array declaration
var declared_array[3][2];
declared_array[0][0] := 100;
declared_array[1][1] := 200;
log declared_array[0][0];
log declared_array[1][1];

// Dynamic array access
var idx := 2;
log simple_array[idx];  // Should be 99

// Array in expressions
log simple_array[0] + simple_array[1];  // 1 + 2 = 3

// // ==========================================
// // 8. CLOSURE TESTS
// // ==========================================

// // Simple closure
def make_counter() {
    var count := 0;
    def increment() {
        count := count + 1;
        return count;
    }
    return increment;
}

var counter1 := make_counter();
var counter2 := make_counter();
// log "Closure tests:";
log counter1();  // 1
log counter1();  // 2
log counter1();  // 3
log counter2();  // 1 (separate counter)

// Closure capturing parameters
def make_adder(x) {
    def add_to_x(y) {
        return x + y;
    }
    return add_to_x;
}

var add5 := make_adder(5);
var add10 := make_adder(10);
log add5(3);    // 8
log add10(3);   // 13

// Complex closures with multiple levels
def outer(x) {
    var y := x * 2;
    def middle(z) {
        def inner(w) {
            return x + y + z + w;
        }
        return inner;
    }
    return middle;
}

var fn := outer(1)(2);
log fn(3);  // 1 + 2 + 2 + 3 = 8

// // ==========================================
// // 9. FIRST-CLASS FUNCTION TESTS
// // ==========================================

// Functions as arguments
def apply_twice(f, x) {
    return f(f(x));
}

def double(x) {
    return x * 2;
}

def increment(x) {
    return x + 1;
}

// log "First-class function tests:";
log apply_twice(double, 3);     // double(double(3)) = double(6) = 12
log apply_twice(increment, 5);  // increment(increment(5)) = increment(6) = 7

// Function returning different functions
def get_operation(op_type) {
    if (op_type = 'a') {
        def add_func(a, b) { return a + b; }
        return add_func;
    } else if (op_type = 'm') {
        def mul_func(a, b) { return a * b; }
        return mul_func;
    } else {
        def default_func(a, b) { return a; }
        return default_func;
    }
}

var add_op := get_operation('a');
var mul_op := get_operation('m');
var default_op := get_operation('u');

log add_op(5, 3);     // 8
log mul_op(5, 3);     // 15
log default_op(5, 3); // 5

// // ==========================================
// // 10. EDGE CASES AND COMPLEX EXPRESSIONS
// // ==========================================

// Complex expressions
// log "Complex expression tests:";
log (1 + 2) * (3 + 4);  // 21
log 2 * 3 + 4 * 5;      // 26
log 10 / 2 + 3 * 4 - 5; // 12

// Operation precedence test
log 2 + 3 * 4;  // 14 (not 20)
log (2 + 3) * 4;  // 20

// Nested if-else with expressions
var nested_if_test := 15;
if (nested_if_test > 10) {
    if (nested_if_test < 20) {
        // log "Between 10 and 20";
    } else {
        // log "Greater than or equal to 20";
    }
} else {
    // log "Less than or equal to 10";
}

// Complex array operations
var complex_array := [1, [2, 3], [4, [5, 6]]];
log complex_array[1][0];         // 2
log complex_array[2][1][1];      // 6

// // ==========================================
// // 11. TYPE CONVERSION TESTS
// // ==========================================

// log "Type conversion tests:";
var int_val := 65;
var float_val := 3.14;
var char_val := 'A';

// Integer to float
log int_val + float_val;  // 68.14

// Character operations
log char_val + 1;  // 'B' (ASCII 66)

// // ==========================================
// // 12. ALGORITHM IMPLEMENTATIONS
// // ==========================================

// Fibonacci
def fibonacci(n) {
    if (n <= 0) {
        return 0;
    } else if (n = 1) {
        return 1;
    } else {
        return fibonacci(n - 1) + fibonacci(n - 2);
    }
}

// log "Fibonacci tests:";
log fibonacci(0);  // 0
log fibonacci(1);  // 1
log fibonacci(7);  // 13

// Prime number check
def is_prime(n) {
    if (n <= 1) {
        return 0;
    }
    
    var i := 2;
    while (i * i <= n) {
        if (n % i = 0) {
            return 0;
        }
        i := i + 1;
    }
    return 1;
}

// Helper function for max
// def max(a, b) {
//     if (a > b) {
//         return a;
//     }
//     return b;
// }

// log "Prime number tests:";
log is_prime(2);   // 1 (true)
log is_prime(4);   // 0 (false)
log is_prime(17);  // 1 (true)

// Dynamic programming: Maximum subarray
var test_array := [-2, 1, -3, 4, -1, 2, 1, -5, 4];
var max_so_far := test_array[0];
var max_ending_here := test_array[0];
// var i := 1;

while (i < 9) {
    // Choose between starting a new subarray or extending the existing one
    max_ending_here := max(max_ending_here + test_array[i], test_array[i]);
    max_so_far := max(max_so_far, max_ending_here);
    i := i + 1;
}

// log "Maximum subarray sum:";
log max_so_far;  // Should be 6 (from the subarray [4, -1, 2, 1])

// Palindrome check for strings/arrays
def is_palindrome(arr, size) {
    var i := 0;
    var j := size - 1;
    
    while (i < j) {
        if (arr[i] ~= arr[j]) {
            return 0;
        }
        i := i + 1;
        j := j - 1;
    }
    return 1;
}

var palindrome_test := [1, 2, 3, 2, 1];
// log "Palindrome test:";
log is_palindrome(palindrome_test, 5);  // 1 (true)

palindrome_test[2] := 5;
log is_palindrome(palindrome_test, 5);  // 0 (false)

// // ==========================================
// // 13. EDGE CASE TESTING
// // ==========================================

// Empty arrays
var empty_array := [];
// log "Empty array length test";
// Assuming we can check length or catch error on access
if (1) {  // Always true as we can't directly check array length
    // log "Empty array handled correctly";
}

// Very large values
var large_value := 1000000;
// log "Large value test:";
log large_value * large_value;  // Test large integer arithmetic

// Nested function calls
def nested_calls(x) {
    return factorial(fibonacci(x));
}

// log "Nested function calls test:";
log nested_calls(4);  // factorial(fibonacci(4)) = factorial(3) = 6

// Self-referential closures
def make_recursive_function() {
    def recursive(n) {
        if (n <= 0) {
            return 1;
        }
        return n * recursive(n - 1);
    }
    return recursive;
}

var recursive_factorial := make_recursive_function();
// log "Self-referential closure test:";
log recursive_factorial(5);  // 120

// // ==========================================
// // 14. COMPREHENSIVE PROGRAM
// // ==========================================

// Solving Project Euler Problem 1: Find sum of all multiples of 3 or 5 below 1000
// log "Project Euler Problem 1:";
var sum := 0;
var euler_i := 1;

while (euler_i < 1000) {
    if ((euler_i % 3 = 0) || (euler_i % 5 = 0)) {
        sum := sum + euler_i;
    }
    euler_i := euler_i + 1;
}

log sum;  // 233168

// // ==========================================
// // 15. ERROR HANDLING TESTS
// // ==========================================

// These tests are commented out since they would cause errors
// Uncomment them to test error handling functionality

// Division by zero
// log 10 / 0;

// Out of bounds array access
// log simple_array[10];

// Type errors
// // log "string" + {};

// log "All tests completed~";