                         ______________________

                          COMPILERS FINAL TEST
                         ______________________





1 Find Second Largest Number
============================

  Write a program to find the second largest number in an array.


2 Check Prime Power
===================

  Write a program to determine if a given number is a prime power.


3 Output prime factorization
============================

  Given a number, output it's prime factorization, smallest to largest,
  one per line. Handle 8-byte numbers.

  On input `48', output will be five lines, first four are `2' and the
  last one is `3'.

  On input `1001016251503', the output is `1000427' and `1000589'.


4 Find Largest Common Integer in Two Arrays
===========================================

  Input is `n m' on the first line, next `n' lines form the first array,
  next `m' lines form the second array.


5 Narayana's cows
=================

  Narayana's cows sequence starts as 1, 1, 1 and term n is the sum of
  terms at n-1 and n-3 position. Find the largest number under 100,
  10000, and 1 million in this sequence that is a product of at most 3
  distinct primes.


6 Print Pascal's triangle upto given height
===========================================

  Height 4 is:
  ,----
  | 1
  | 1 1
  | 1 2 1
  | 1 3 3 1
  `----


7 Count vowels
==============

  Your input is one string per line. Output the number of vowels in each
  string, one per line.


8 Alphanumeric number
=====================

  Your input is one string per line. Output the square of the number
  obtained by deleting all non-digits in the string. Produce one number
  per line in the output. If there are no digits, consider number to be
  0.

  For example, if the string is `3aw4asdf8', the output should be
  `121104'.


9 Max alphanumeric number
=========================

  Same as the previous problem but you have to output the square of the
  largest number obtained using the digits.

  In the previous example, the number is `843' and the output is
  `710649'.


10 3SUM
=======

  Given an array, find three numbers a, b, c in it such that a + b =
  c. Output `a b c' if they exist, else output the letter `N'.


11 Longest palindromic subsequence
==================================

  Given an array of integers, find the length of the longest subsequence
  that reads the same forwards and backwards.


12 Subset sum
=============

  Implement brute-force algorithm for subset sum. Given an array of
  integers and a target, output a subset of elements in the array that
  sum to the target or NO if none exists.


13 Conway's game of life
========================

  Implement Conway's game of life. Take size of the grid, initial seed,
  and number n of generations as input and print the grid after n
  generations.

  For block life
  ,----
  | 4 4
  | ....
  | .xx.
  | .xx.
  | ....
  | 100
  `----

  The output would be the initial seed.

  Also try Blinker and Glider on a 100x100 grid.


14 AoC 2022 Day 1
=================

  <https://adventofcode.com/2022/day/1>


15 AoC 2022 Day 8
=================

  <https://adventofcode.com/2022/day/8>


16 Fibonacci and Collatz
========================

  Find the Fibonacci number under 100, 10000, and 1 million that has the
  longest Collatz sequence.


17 Write a 9x9 grid (classic) Sudoku solver
===========================================


18 Fibonacci prime power
========================

  Find the largest number under 100, 10000, and 1 million in Fibonacci
  sequence that is a prime power.


19 Runs
=======

  Your input is a sequence of 0's and 1's. A run is a contiguous
  sub-sequence where every element is the same. Output the length of the
  longest run in the given sequence.

  ,----
  | 0
  | 1
  | 1
  | 0
  | 1
  | 0
  | 0
  | 0
  | 1
  | 1
  `----

  output is 3.


20 Euler problem 659
====================

  <https://projecteuler.net/problem=659>


21 Project Euler problem 662
============================

  <https://projecteuler.net/problem=662>


22 Project Euler problem 684
============================

  <https://projecteuler.net/problem=684>


23 Project Euler problem 686
============================

  <https://projecteuler.net/problem=686>


24 Stack VM
===========

  Your input is a sequence of numbers that is a program for a stack
  machine. Execute the program and output the top element of the stack
  at the end.

  Opcodes are integers as follows:

  0
        Duplicate top element
  1
        Push
  2
        Pop
  3
        Add
  4
        Multiply
  5
        Subtract
  6
        Divide and round-down
  7
        Jump forward
  8
        Jump backward
  9
        Jump forward if zero
  10
        Jump forward if positive
  11
        Jump forward if negative
  12
        Jump backward if zero
  13
        Jump backward if positive
  14
        Jump backward if negative
  15
        Halt

  Some opcodes require operands other than those on stack. In this case,
  the integer following the opcode is that operand. Push and jump
  instructions all require these operands, the value to be pushed and
  the offset to jump.

  The program `push 1, push 2, add, halt' is `1, 1, 1, 2, 3, 15' and
  produces `3' as the output.


25 Compute digits of e
======================

  [Algorithm for e]

  Compute 10, 1000, and 100000 digits.


[Algorithm for e] <http://stanleyrabinowitz.com/bibliography/spigot.pdf>


26 Josephus
===========

  Write a program to solve Josephus' problem given n and k.


27 Project Euler 101
====================

  <https://projecteuler.net/problem=101>


28 Given month and year, print calendar properly aligned
========================================================

  ,----
  |      April 2025       
  | Su Mo Tu We Th Fr Sa  
  |        1  2  3  4  5  
  |  6  7  8  9 10 11 12  
  | 13 14 15 16 17 18 19  
  | 20 21 22 23 24 25 26  
  | 27 28 29 30  
  `----


29 Rock, paper, scissors
========================

  Write a program to play this game. The computer should play randomly
  and you should print the result of each round. User should have option
  to stop anytime.

  You may write a linear congruential generator to generate random
  numbers from a seed in your program.


30 SHA256
=========

  Write a program to compute the SHA256 given file contents.
